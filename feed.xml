<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://mahendranv.github.io/</id><title>Mahendran</title><subtitle>Exploring android/compose/flutter/springboot</subtitle> <updated>2022-09-18T23:42:28+05:30</updated> <author> <name>Mahendran Vadivalagan</name> <uri>https://mahendranv.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://mahendranv.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://mahendranv.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> ¬© 2022 Mahendran Vadivalagan </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Android Utility belt ‚Äî Collection of dependencies for a greenfield project</title><link href="https://mahendranv.github.io/posts/android-gradle-deps-kit/" rel="alternate" type="text/html" title="Android Utility belt ‚Äî Collection of dependencies for a greenfield project" /><published>2021-10-28T00:00:00+05:30</published> <updated>2021-10-28T00:00:00+05:30</updated> <id>https://mahendranv.github.io/posts/android-gradle-deps-kit/</id> <content src="https://mahendranv.github.io/posts/android-gradle-deps-kit/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="Gradle" /> <summary> Starting an android project will bring in a new set of challenges üëÄ aka adding tons of Gradle dependencies. Even though you use these dependencies in almost all your applications, you can‚Äôt just grab them from the previous project because it might be an outdated version. By the time you find the latest version and add it to the project, you‚Äôd lose half the energy. Coming to the point!! ‚Ä¶ In ... </summary> </entry> <entry><title>Android ‚Äî Instrumentation test with hilt</title><link href="https://mahendranv.github.io/posts/hilt-instrument/" rel="alternate" type="text/html" title="Android ‚Äî Instrumentation test with hilt" /><published>2021-10-20T00:00:00+05:30</published> <updated>2021-10-21T22:28:44+05:30</updated> <id>https://mahendranv.github.io/posts/hilt-instrument/</id> <content src="https://mahendranv.github.io/posts/hilt-instrument/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="Hilt" /> <category term="Espresso" /> <summary> Testing in Android has been a pain from the beginning and there is no standard architecture setup to execute the frictionless test. As you know there is no silver bullet for all the snags. This piece of article covers how do you fake dependencies to your hilt-viewmodel and assert the same from fragment using espresso. What do we achieve here? Decoupled UI from navigation and real data sourc... </summary> </entry> <entry><title>Smoke, mirrors &amp; HiltViewModel</title><link href="https://mahendranv.github.io/posts/hilt-codegen/" rel="alternate" type="text/html" title="Smoke, mirrors &amp; HiltViewModel" /><published>2021-10-04T00:00:00+05:30</published> <updated>2021-10-06T21:43:03+05:30</updated> <id>https://mahendranv.github.io/posts/hilt-codegen/</id> <content src="https://mahendranv.github.io/posts/hilt-codegen/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="Hilt" /> <summary> This is the second installment in the three-part series. To understand better, you can read part1 or open the github project to explore the code. Part1: Android ‚Äî Basic Hilt setup with viewmodel + fragment Part2: Smoke, mirrors &amp;amp; HiltViewModel Part3: Fakes and espresso ‚Ä¶ Introduction In a typical Android project creating a ViewModel with dependencies require us to provide an explicit v... </summary> </entry> <entry><title>Android ‚Äî ViewModel factory and instantiation</title><link href="https://mahendranv.github.io/posts/viewmodel-store/" rel="alternate" type="text/html" title="Android ‚Äî ViewModel factory and instantiation" /><published>2021-10-01T00:00:00+05:30</published> <updated>2021-10-01T23:58:58+05:30</updated> <id>https://mahendranv.github.io/posts/viewmodel-store/</id> <content src="https://mahendranv.github.io/posts/viewmodel-store/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="ViewModel" /> <summary> Android ViewModel is one of the most helpful APIs exist in the ecosystem. It‚Äôs a major release which changed how the Android apps built. Together with LiveData it decoupled the UI from business logic without much boilerplate. This post is about how the viewmodel is instatiated/cached/provided to the caller. üìù API doc Before we get into specific usecases, let‚Äôs see few key players in this flo... </summary> </entry> <entry><title>Android ‚Äî Basic Hilt setup with viewmodel + fragment</title><link href="https://mahendranv.github.io/posts/hilt-viewmodel/" rel="alternate" type="text/html" title="Android ‚Äî Basic Hilt setup with viewmodel + fragment" /><published>2021-09-28T00:00:00+05:30</published> <updated>2021-10-04T16:41:07+05:30</updated> <id>https://mahendranv.github.io/posts/hilt-viewmodel/</id> <content src="https://mahendranv.github.io/posts/hilt-viewmodel/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="Hilt" /> <summary> Hilt is a modern android DI framework for dependency injection. It is merely a wrapper around Dagger2. Forget dagger-android, hilt brings a lot to our plate. This article covers steps to add hilt to the project and use along with viewmodel-fragment. ‚Ä¶ This is the first installment in three part series. Part1: Android ‚Äî Basic Hilt setup with viewmodel + fragment Part2: Smoke, mirrors &amp;amp; H... </summary> </entry> </feed>
