<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://mahendranv.github.io/</id><title>Mahendran</title><subtitle>Exploring android/compose/flutter/springboot</subtitle> <updated>2021-10-02T00:58:56+05:30</updated> <author> <name>Mahendran Vadivalagan</name> <uri>https://mahendranv.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://mahendranv.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://mahendranv.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 Mahendran Vadivalagan </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Android — ViewModel factory and instantiation</title><link href="https://mahendranv.github.io/posts/viewmodel-store/" rel="alternate" type="text/html" title="Android — ViewModel factory and instantiation" /><published>2021-10-01T00:00:00+05:30</published> <updated>2021-10-01T23:58:58+05:30</updated> <id>https://mahendranv.github.io/posts/viewmodel-store/</id> <content src="https://mahendranv.github.io/posts/viewmodel-store/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="ViewModel" /> <summary> Android ViewModel is one of the most helpful APIs exist in the ecosystem. It’s a major release which changed how the Android apps built. Together with LiveData it decoupled the UI from business logic without much boilerplate. This post is about how the viewmodel is instatiated/cached/provided to the caller. 📝 API doc Before we get into specific usecases, let’s see few key players in this flo... </summary> </entry> <entry><title>Android — Basic Hilt setup with viewmodel + fragment</title><link href="https://mahendranv.github.io/posts/hilt-viewmodel/" rel="alternate" type="text/html" title="Android — Basic Hilt setup with viewmodel + fragment" /><published>2021-09-28T00:00:00+05:30</published> <updated>2021-09-28T00:00:00+05:30</updated> <id>https://mahendranv.github.io/posts/hilt-viewmodel/</id> <content src="https://mahendranv.github.io/posts/hilt-viewmodel/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="Hilt" /> <summary> Hilt is a modern android DI framework for dependency injection. It is merely a wrapper around Dagger2. Forget dagger-android, hilt brings a lot to our plate. This article covers steps to add hilt to the project and use along with viewmodel-fragment. … This is the first installment in three part series. Part1: Android — Basic Hilt setup with viewmodel + fragment Part2: Smoke, mirrors &amp;amp; H... </summary> </entry> <entry><title>Designing a bottom navigation bar with Jetpack compose</title><link href="https://mahendranv.github.io/posts/compose-bottom-bar/" rel="alternate" type="text/html" title="Designing a bottom navigation bar with Jetpack compose" /><published>2021-07-30T00:00:00+05:30</published> <updated>2021-07-30T00:00:00+05:30</updated> <id>https://mahendranv.github.io/posts/compose-bottom-bar/</id> <content src="https://mahendranv.github.io/posts/compose-bottom-bar/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="Compose" /> <summary> Intro This article covers the design aspect of the bottom navigation bar using Jetpack compose. We’re looking at a simple composable with few customizable params for the icons. Take this as an approach doc for designing UI rather than an API guide. The result will look like this. 📐 Analysis Let’s dissect this view and see how to build this. This is a row with equal space around each i... </summary> </entry> <entry><title>I created few shapes in Jetpack compose / Gist included</title><link href="https://mahendranv.github.io/posts/compose-shapes-gists/" rel="alternate" type="text/html" title="I created few shapes in Jetpack compose / Gist included" /><published>2021-07-09T00:00:00+05:30</published> <updated>2021-07-10T00:04:49+05:30</updated> <id>https://mahendranv.github.io/posts/compose-shapes-gists/</id> <content src="https://mahendranv.github.io/posts/compose-shapes-gists/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="Compose" /> <summary> Sharing few of my jetpack-compose shapes here. Did path tracing and drew path on canvas. Heart 🚀 - Gist Tag 🚀 - Gist Polygons 🚀 - Gist Car 🚀 - Gist 👷 Tool set Figma for path tracing : steps here SVG path editor Read about polar coordinates here </summary> </entry> <entry><title>Jetpack compose - shape your views</title><link href="https://mahendranv.github.io/posts/compose-shapes/" rel="alternate" type="text/html" title="Jetpack compose - shape your views" /><published>2021-06-23T00:00:00+05:30</published> <updated>2021-07-09T23:46:07+05:30</updated> <id>https://mahendranv.github.io/posts/compose-shapes/</id> <content src="https://mahendranv.github.io/posts/compose-shapes/" /> <author> <name>Mahendran Vadivalagan</name> </author> <category term="Android" /> <category term="Compose" /> <summary> Jetpack compose has an elegant way to cut out a Compose view into the desired shape. I’m covering few shapes that are available in the core compose lib and where do they differ. All the shapes discussed here operate on views corners. So, before going through each, let’s go through a basic building block called CornerSize. 📏 CornerSize CornerSize is an interface that provides an abstraction t... </summary> </entry> </feed>
